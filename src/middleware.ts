import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';
import { User } from '@/types/user';

export function middleware(request: NextRequest) {
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• currentUser ‡∏à‡∏≤‡∏Å Cookies
    const currentUser = request.cookies.get('currentUser')?.value;
    if (currentUser) {
        const currentUserData: User = JSON.parse(currentUser);
        // ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• currentUserData ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô:
        console.log("üöÄ Middleware ~ currentUser:", currentUserData?.permission);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Method ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (PUT ‡πÅ‡∏•‡∏∞ POST)
    const allowedMethods = ['PUT', 'POST'];
    if (!allowedMethods.includes(request.method)) {
        return new NextResponse('Method Not Allowed', { status: 405 });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á (Path)
    const pathname = request.nextUrl.pathname;
    if (currentUser && !pathname.startsWith('/admin/dashboard')) {
        return NextResponse.redirect(new URL('/admin/dashboard', request.url));
    }

    if (!currentUser && !pathname.startsWith('/login')) {
        return NextResponse.redirect(new URL('/login', request.url));
    }

    // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á endpoint ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
    return NextResponse.next();
}

// ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î matcher ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Middleware
export const config = {
    matcher: ['/((?!api|_next/static|_next/image|.*\\.png$).*)'], // ‡πÉ‡∏ä‡πâ regex ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà Middleware ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ
};
