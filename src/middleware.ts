import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';
import { User } from '@/types/user';

export function middleware(request: NextRequest) {
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• currentUser ‡∏à‡∏≤‡∏Å Cookies
    const currentUser = request.cookies.get('currentUser')?.value;

    if (currentUser) {
        const currentUserData: User = JSON.parse(currentUser);
        console.log("üöÄ ~ middleware ~ currentUser:", currentUserData?.permission);
    } else {
        console.log("üîí ~ middleware ~ No currentUser found");
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Method ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (PUT, POST, GET)
    const allowedMethods = ['PUT', 'POST', 'GET'];
    if (!allowedMethods.includes(request.method)) {
        return new NextResponse(
            JSON.stringify({ message: `Method ${request.method} ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï` }),
            {
                status: 405,
                headers: { 'Content-Type': 'application/json' },
            }
        );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á (Path) ‡πÅ‡∏•‡∏∞ Redirect ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const pathname = request.nextUrl.pathname;
    if (currentUser && !pathname.startsWith('/admin/dashboard')) {
        return NextResponse.redirect(new URL('/admin/dashboard', request.url));
    }

    if (!currentUser && !pathname.startsWith('/login')) {
        return NextResponse.redirect(new URL('/login', request.url));
    }

    // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ API ‡∏ï‡πà‡∏≠‡πÑ‡∏õ
    return NextResponse.next();
}

export const config = {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î matcher ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà Middleware ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    matcher: ['/((?!api|_next/static|_next/image|.*\\.png$).*)'], // ‡πÉ‡∏ä‡πâ regex ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
};
